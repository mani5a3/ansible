node {
  stage('SCM') {
    git 'https://github.com/spring-petclinic/spring-petclinic-angularjs.git'
  }
  stage('SonarQube analysis') {
    withSonarQubeEnv('sonar') {
      sh 'mvn package sonar:sonar'
    } // SonarQube taskId is automatically attached to the pipeline context
  }
}

note: in fifth line, sonar is the name whaterver u  have given  in the sonarscanner in configuressystem in globaltoolmanagement


------------------------------------------------------------------------------------------------------------------------------



sonar and jenkins in windows

node {
   stage('git'){
       git 'https://github.com/wakaleo/game-of-life.git'

   }

   stage('test-reports')
   {
       junit('gameoflife-web/target/surefire-reports/*.xml')
   }
     stage('SonarQube analysis') {
    withSonarQubeEnv('sonar') {
      bat 'mvn package sonar:sonar'
    }
  }
  
   stage('archieve')
   {
       archiveArtifacts 'gameoflife-web/target/*.war'

   }
  
  
   
}


________________________________________________________________________________
jenkins pipeline with sonar properties defining in jenkins job

node {
   stage('git'){
       git 'https://github.com/mani5a3/spring-petclinic.git'

   }
   
    stage('build&package')
   {
    sh 'mvn package'
   }
 stage('SonarQube analysis') {
         def scannerHome = tool 'sonarscanner';
                    withSonarQubeEnv('sonarqube') {
                        sh "${scannerHome}/bin/sonar-scanner"
                      '-Dsonar.projectKey=petclinic' +
                                    '-Dsonar.sonar.projectName=petclinic' +
                                    '-Dsonar.sonar.projectVersion=1.0' +
                                '-Dsonar.sonar.login=admin' +
                                 '-Dsonar.sonar.password=admin' +
                                 '-Dsonar.sonar.host.url=http://192.168.33.11:9000' +
                                  '-Dsonar.sonar.sources=/var/lib/jenkins/workspace/sonar'
                                              }
                               }

                               

}

____________________________________________________________________________
jenkins pipeline with  jfrog and with sonar properties defining at repository level

pipeline {
agent any 
stages {
stage('git') {
steps {
git 'https://github.com/mani5a3/spring-petclinic.git'
}
}
stage('build') {
steps {
   sh 'mvn package'
}
}

stage('SonarQube analysis'){
steps {

withSonarQubeEnv('sonarqube') {
    
sh "/home/softwares/sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner -Dproject.settings=sonar-project.properties"
                                              }
                               }
}

stage('jfrog'){
            
            steps{
                script{
                    def SERVER_ID = 'artifactory'
                    def server = Artifactory.server SERVER_ID
                    
                    def uploadSpec = """{
                        "files": [{
                                    "pattern": "target/*.jar",
                                    "target": "example-repo-local"
                        }]
                    }"""
                    
                    server.upload(uploadSpec)
                }
            }
        }


}

}

-----------------------------------------------------------------------------
jenkins pipeline with nexus 2.x version

node {
   stage('git'){
       git 'https://github.com/mani5a3/spring-petclinic.git'

   }
   
    stage('build&package')
   {
    bat 'mvn package'
   }
   
   stage('artifacts')
   {
       nexusArtifactUploader artifacts: [[artifactId: 'spring-petclinic', classifier: '', file: 'target/spring-petclinic-2.0.0.BUILD-SNAPSHOT.jar', type: 'jar']], credentialsId: 'nexus2.14', groupId: 'org.springframework.samples', nexusUrl: 'localhost:8083/nexus', nexusVersion: 'nexus2', protocol: 'http', repository: 'snapshots', version: '2.0.0.BUILD-SNAPSHOT'
       
   }
}


----------------------------------------------------------------------------------------------
pipeline {
	agent any
	options {
		buildDiscarder(logRotator(numToKeepStr: '3', artifactNumToKeepStr: '3'))
	}
	parameters {
		choice(name: 'branchname', choices: ['master', 'mani_dev', 'test_dev'], description: 'select the branch name')
		 booleanParam(name: 'skip_stage', defaultValue: false, description: 'set to true to skip the stage')
	}
	stages {
		stage("clone") {
			
			steps {
			    script {
			        currentBuild.displayName = "declarative_${BUILD_NUMBER}"
        			git branch: "${params.branchname}", url: 'https://github.com/mani5a3/game-of-life.git'
			    }
			}
		}
		stage("build") {
			when {
				expression {
			     params.skip_stage != true
				}
			}
			steps {
			bat 'mvn package'
			}
		}
		stage("approve for build") {
			steps {
			timeout(time:1, unit: 'MINUTES'){
			input (
				message: 'approval for maven build',
				id:  'userInput',
				submitter: 'raghu'
			)
			}
		  }
		}
		stage("jfrog"){
			steps {
				script {
                    def SERVER_ID = 'artifactory'
                    def server = Artifactory.server SERVER_ID
					def uploadfiles = """{
					"files": [
					{
						"pattern": "gameoflife-web/target/*.war",
						"target": "example-repo-local"
					},
					{
						"pattern": "gameoflife-core/target/*.jar",
						"target": "example-repo-local"
					}
					]
					}"""
					server.upload(uploadfiles)
				}
			}
		}
	}
	post {
		always {
			emailext (
				subject: 'jenkins pipeline notification',
				body: '${BUILD_URL}',
				to: 'manikantagaddam.outlook.com, sivakrishna5a35a3@gmail.com'
			)
		}
	}
}
